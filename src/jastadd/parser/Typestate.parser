/**
 * Parsing Typestate annotation, the protocol file name will be parsed as the ID of the TypestateAnnotation
 */
Modifier modifier = typestate_annotation;
ABSTypestateAnnotation typestate_annotation =
	AT TYPESTATEANNO LPAREN STRING_LITERAL.s RPAREN     {: return new TypestateAnnotation(s); :}
  | TYPESTATEANNO    								 	{: return new TypestateAnnotation("TypestateDefault"); :}
;

/**
 * Parsing the protocol file
 * Adapted from previous version of mungo
 */
TypeDecl type_declaration = typestate_declaration.td	{: return td; :} ;

TypestateDecl typestate_declaration	=
					TYPESTATE IDENTIFIER.id LBRACE IDENTIFIER EQ typestate.t state_name_list.tnl RBRACE
					{:
						InitState is = new InitState(IDENTIFIER, t);
						is.setStart(IDENTIFIER.getStart());
						is.setEnd(IDENTIFIER.getEnd());
						return new TypestateDecl(new Modifiers(), id, new List(), is, tnl);
					:}
					|	
					TYPESTATE IDENTIFIER.id LBRACE IDENTIFIER EQ typestate.t RBRACE
					{:
						InitState is = new InitState(IDENTIFIER, t);
						is.setStart(IDENTIFIER.getStart());
						is.setEnd(IDENTIFIER.getEnd());
						return new TypestateDecl(new Modifiers(), id, new List(), is , new List<State>()); //TODO consider EmptyState object
					:}
					;

List state_name_list
					=	state_name.tn
						{:
							return new List<State>().add(tn);
						:}
					|	state_name_list.tnl state_name.tn
						{:
							return tnl.add(tn);
						:}
					;

State state_name			=	IDENTIFIER.i EQ typestate.t
						{:
							State s = new State(i, t); 
//							s.setStart(EQ.getStart());
							return s;
						:}
					;

List typestate_list			=	method.m
						{:
							return new List<Typestate>().add(m);
						:}
					|	typestate_list.tl COMMA method.m
						{:
							return tl.add(m);
						:}
					;

Typestate typestate			=	LBRACE typestate_list.tl RBRACE
						{:
							TypestateMethodList l = new TypestateMethodList(tl);
//							l.setStart(LBRACE.getStart());
							return l;
						:}
					|	LBRACE RBRACE
						{:
							return new EndTypestate();
						:}
					|	END
						{:
							return new EndTypestate();
						:}
					|	t_label.tl
						{:
							return tl;
						:}
					;

TypestateMethod method			=	ttype.t IDENTIFIER.i LPAREN ttype_list.tl RPAREN COLON typestate.ts
						{:
							return new TypestateMethod(t, i, new TTypeArgs(tl), ts);
						:}
					|	ttype.t IDENTIFIER.i LPAREN RPAREN COLON typestate.ts
						{:
							return new TypestateMethod(t, i, new TTypeArgs(), ts);
						:}
					|	ttype.t IDENTIFIER.i LPAREN ttype_list.tl RPAREN COLON t_switch.ts
						{:
							return new TypestateMethod(t, i, new TTypeArgs(tl), ts);
						:}
					|	ttype.t IDENTIFIER.i LPAREN RPAREN COLON t_switch.ts
						{:
							return new TypestateMethod(t, i, new TTypeArgs(), ts);
						:}
					;

TypestateSwitch t_switch		=	LT switch_case_list.scl GT
						{:
							TypestateSwitch ts = new TypestateSwitch(scl);
//							ts.setStart(LT.getStart());
							return ts;
						:}
					;

List switch_case_list			=	switch_case.sc
						{:
							return new List<TypestateSwitchCase>().add(sc);
						:}
					|	switch_case_list.scl COMMA switch_case.sc
						{:
							return scl.add(sc);
						:}
					;

TypestateSwitchCase switch_case		=	IDENTIFIER.i COLON typestate.t
						{:
							return new TypestateSwitchCase(i, t);
						:}
					;


TypestateLabel t_label			=	IDENTIFIER
						{:
							TypestateLabel t = new TypestateLabel(IDENTIFIER);
//							t.setStart(IDENTIFIER.getStart());
							return t;
						:}
					;

/**
 * Fix parsing type with typestate
 * The syntax in source code should be in this format: Class<<Typestate>>
 * For example: Stack<<Empty>>
 */
TTypestate ttypestate   = type.a LSHIFT typestate.t RSHIFT
						{:	
							TTypestate tt;
							if (a instanceof ParseName) {
								ParseName temp = (ParseName) a;
								TypeAccess ta = new TypeAccess(temp.name());
								tt = new TTypestate(ta, t);
							} else {
								tt = new TTypestate(a, t);
							}
//							tt.setStart(LT.getStart());
							System.out.println(tt);
							return tt;
						:}
						;

TType ttype				=	type.a 
						{:
							TType tt;
							if (a instanceof ParseName){
								ParseName temp = (ParseName) a;
								TypeAccess t = new TypeAccess(temp.name());
								tt = new TType(t);
							} else {
								tt = new TType(a);
							}
							return tt;
						:}

					|	VOID

						{:
							return new TType(new PrimitiveTypeAccess("void"));
						:}
					;

List ttype_list				=	ttype.t
						{:
							return new List<TType>().add(t);
						:}
					|	ttype_list.tl COMMA ttype.t
						{:
							return tl.add(t);
						:}

					| 	ttypestate.tt
						{:
							return new List<TType>().add(tt);
						:}

					|	ttype_list.tl COMMA ttypestate.tt
						{:
							return tl.add(tt);
						:}
					;


