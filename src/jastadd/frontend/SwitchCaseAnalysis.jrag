aspect SwitchCaseAnalysis {
	/**
	 * A map recording variable-state pairs in each valid case
	 */
	private HashMap<String, HashMap<Variable, HashMap<String, State>>> SwitchStmt.stateMap;
	public HashMap<String, HashMap<Variable, HashMap<String, State>>> SwitchStmt.getStateMap() {
		return this.stateMap;
	}
	public void SwitchStmt.initStateMap() {
		this.stateMap = new HashMap<String, HashMap<Variable, HashMap<String, State>>>();
		Block blk = this.getBlock();
		for (Stmt s: blk.getStmts()) {
			if (s instanceof ConstCase) {
				Expr exp = ((ConstCase)s).getValue();
				if (exp.type().isEnumDeclType()){
					VarAccess value = (VarAccess)((ConstCase)s).getValue();
					String caseLabel = value.getID();
					HashMap<Variable, HashMap<String, State>> varState = new HashMap<Variable, HashMap<String, State>>();
					varState.put(this.recordVariable, this.recordSwitchState); // init into typestateswitch state 
					this.stateMap.put(caseLabel, varState);
				}
			}
		}
	}

	/**
	 * A map recording statement information
	 */
	private HashMap<Stmt, StmtInfo> SwitchStmt.stmtInfoMap;

	/**
	 * Record the initial switch states of the variable in Expr
	 */
	private HashMap<String, State> SwitchStmt.recordSwitchState;

	public HashMap<String, State> SwitchStmt.getRecordTypestateSwitch() {
		return this.recordSwitchState;
	}

	public void SwitchStmt.setRecordTypestateSwitch(HashMap<String, State> switchState) {
		this.recordSwitchState = switchState;
	}

	/**
	 * Record result state and case label
	 */
	private HashMap<String, State> SwitchStmt.recordState;

	public HashMap<String, State> SwitchStmt.getRecordState() {
		return this.recordState;
	}

	public void SwitchStmt.setRecordState(HashMap<String, State> state) {
		this.recordState = state;
	}

	private String SwitchStmt.recordCaseLabel;

	public String SwitchStmt.getRecordCaseLabel() {
		return this.recordCaseLabel;
	}

	public void SwitchStmt.setRecordCaseLabel(String label) {
		this.recordCaseLabel = label;
	}

	/**
	 * Record Variable, the variable in Expr of the SwitchStmt
	 * which the state will be tracked.
	 */
	private Variable SwitchStmt.recordVariable;

	public Variable SwitchStmt.getRecordVariable() {
		return this.recordVariable;
	}

	public void SwitchStmt.setRecordVariable(Variable variable) {
		this.recordVariable = variable;
	}

	/**
	 * Set record variable according to Expr
	 */
	public void SwitchStmt.initRecordVariable() {
		Expr expr = getExpr();
		if (expr instanceof Dot) {
			Dot d = (Dot) expr;
			if (d.lastAccess() instanceof MethodAccess) {
				Expr preExpr = ((MethodAccess)d.lastAccess()).prevExpr();
				if (preExpr instanceof VarAccess) { // this?
					setRecordVariable(((VarAccess)preExpr).decl());
				}
			}
		}
	}

	class StmtInfo {
		private String caseLabel;
		int termination = -1; // -1 no termination, 0 break/end block, 1 continue
		String terminationLabel = null;
		public StmtInfo(String caseLabel) {
			this.caseLabel = caseLabel;
		}

		public void setTermination(int termination) {
			if ((-1 <= termination) && (1 >= termination)) {
				this.termination = termination;
			}
		}

		public void setTerminationLabel(String terminationLabel) {
			this.terminationLabel = terminationLabel;
		}

		public String getCaseLabel() {
			return this.caseLabel;
		}

		public int getTermination() {
			return this.termination;
		}

		public String getTerminationLabel() {
			return this.terminationLabel;
		}

		public boolean hasTermination() {
			return this.termination != -1;
		}

		public boolean hasBreak() {
			return this.termination == 0;
		}

		public boolean hasContinue() {
			return this.termination == 1;
		}
	}

	public HashMap<Stmt, StmtInfo> SwitchStmt.getStmtInfoMap() {
		if (this.stmtInfoMap != null) {
			return stmtInfoMap;
		}
		Stack<Stmt> stack = new Stack<Stmt>();
		HashMap<Stmt, StmtInfo> map = new HashMap<Stmt, StmtInfo>();
		Block blk = getBlock();
		String caseLabel = null;
		for (Stmt s: blk.getStmts()) {			
			if (s instanceof Case) {
				if (s instanceof ConstCase) {
					Expr exp = ((ConstCase)s).getValue();
					if (exp.type().isEnumDeclType()){
						VarAccess value = (VarAccess)((ConstCase)s).getValue();
						caseLabel = value.getID();
					} else {
						caseLabel = ((ConstCase)s).getValue().toString(); // Store information including invalid case label
					}					
				} else {
					caseLabel = "";
				}
				StmtInfo info = new StmtInfo(caseLabel);
				map.put(s, info);

				if (stack.empty()) {
					stack.push(s);
				} else {
					stack.clear();
					stack.push(s);
				}
			} else if (s instanceof BreakStmt) {
				if (caseLabel != null) {
					String label = ((BreakStmt)s).hasLabel() ? null : ((BreakStmt)s).getLabel();
					StmtInfo info = new StmtInfo(caseLabel);
					info.setTermination(0);
					info.setTerminationLabel(label);
					map.put(s, info);
					caseLabel = null; // reset case label

					Stmt temp = null;
					while(!stack.empty()) {
						temp = stack.pop();
						StmtInfo i = map.get(temp);
						i.setTermination(0);
						i.setTerminationLabel(label);
						if (temp instanceof Case) {
							break;
						}
					}
				}				
			} else if (s instanceof ContinueStmt) {
				if (caseLabel != null) {
					String label = ((ContinueStmt)s).hasLabel() ? null : ((ContinueStmt)s).getLabel();
					StmtInfo info = new StmtInfo(caseLabel);
					info.setTermination(1);
					info.setTerminationLabel(label);
					map.put(s, info);
					caseLabel = null; // reset case label

					Stmt temp = null;
					while(!stack.empty()) {
						temp = stack.pop();
						StmtInfo i = map.get(temp);
						i.setTermination(1);
						i.setTerminationLabel(label);
						if (temp instanceof Case) {
							break;
						}
					}
				}				
			} else {
				if (caseLabel != null) {
					StmtInfo info = new StmtInfo(caseLabel);
					map.put(s, info);
					stack.push(s);
				}
			}
		}
		this.stmtInfoMap = map;
		return map;
	}

	public StmtInfo MethodAccess.lookupInfo(HashMap<Stmt, StmtInfo> infoMap) {
		ASTNode node = this.getParent();
        while (node != null) {
            if (node instanceof Stmt) {
                if (infoMap.containsKey((Stmt)node)) {
                	return infoMap.get((Stmt)node);
                } else {
                	node = node.getParent();
                }
            } else {
                node = node.getParent();
            }
        }
        return null;
	}

	/**
     * Lookup a Switch Stmt of the a MethodAccess
     */
    syn SwitchStmt MethodAccess.lookupSwitch() {
    	if (hasPrevExpr()) {
    		Expr va = prevExpr();
    		Variable v;
    		if (!va.isVariable()) {
    			return null;
    		} else {
    			v = ((VarAccess) va).decl();
    		}
    		ASTNode node = this.getParent();
        	while (node != null) {
            	if (node instanceof SwitchStmt) {
            		if (v.equals(((SwitchStmt) node).getRecordVariable())) {
            			return (SwitchStmt) node;
            		} else {
            			node = node.getParent();
            		}                	
            	} else {
                	node = node.getParent();
            	}
        	}
        	return null;
    	}        
        return null;
    }

    /**
     * Lookup all Switch Stmt of the a MethodAccess
     */
	syn LinkedList<SwitchStmt> MethodAccess.lookupAllSwitch() {
		LinkedList<SwitchStmt> list = new LinkedList<SwitchStmt>();
		ASTNode node = this.getParent();
		while (node != null) {
			if (node instanceof SwitchStmt) {
				list.add((SwitchStmt) node);               	
			}
			node = node.getParent();
		}
		return list;
	}

    /**
     * Check if a MethodAccess is the Expr of a SwitchStmt or not
     */
    syn boolean MethodAccess.isSwitchStmtExpr() {
    	return (lookupExprSwitchStmt() != null);
    }

    syn SwitchStmt MethodAccess.lookupExprSwitchStmt() {
    	if (hasPrevExpr()) {
    		Expr va = prevExpr();
    		Variable v;
    		if (!va.isVariable()) {
    			return null;
    		} else {
    			v = ((VarAccess) va).decl();
    		}
    		ASTNode node = this.getParent();
        	while (node != null) {
            	if (node instanceof SwitchStmt) {
            		if (v.equals(((SwitchStmt) node).getRecordVariable())) { // switch stmt match and variable match
            			return (SwitchStmt) node;
            		} else {
            			node = node.getParent();
            		}                	
            	} else if (node instanceof Block) { //not in expr
            		return null;
            	} else {
                	node = node.getParent();
            	}
        	}
        	return null;
    	}        
        return null;
    }

    /**
     * Lookup a Switch Stmt of the a MethodAccess
     */
    syn SwitchStmt Stmt.lookupSwitch() {
        ASTNode node = this.getParent();
        while (node != null) {
            if (node instanceof SwitchStmt) {
                return (SwitchStmt) node;
            } else {
                node = node.getParent();
            }
        }
        return null;
    }
}