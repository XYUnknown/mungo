aspect TypestateGraph {
	private LinkedList<Typestate> TypestateDecl.checkedList;

	public LinkedList<Typestate> TypestateDecl.getCheckedList() {
		return this.checkedList;
	}
	
	public void TypestateDecl.addChecked(Typestate t) {
		if (this.checkedList == null) {
			this.checkedList = new LinkedList<Typestate>();
		}
		this.checkedList.add(t);
	}

	public boolean Typestate.isChecked() {
		return (this.typestateDecl().getCheckedList() == null) ? false : this.typestateDecl().getCheckedList().contains(this);
	}

	public void Typestate.setIsChecked() {
		this.typestateDecl().addChecked(this);
	}

	public LinkedList<Problem> TypestateDecl.traversalMethodCheck() {
		LinkedList<Problem> problems = new LinkedList<Problem>();
		TypestateMethodList init = (TypestateMethodList) getInitState().getTypestate();
		problems = init.doMethodTraversal(problems);
		return problems;
	}

	public LinkedList<Problem> TypestateMethodList.doMethodTraversal(LinkedList<Problem> problems) {
		if (!this.isChecked()) {
			this.setIsChecked();
			for (int i = 0; i < getNumTypestateMethod(); i++) {
				TypestateMethod tm = getTypestateMethod(i);
				System.out.println(tm.getID());
				// MethodDecl problem collection
				MethodDecl md = this.typestateDecl().getTypeDecl().lookupMethod(tm);
				problems.addAll(md.typestateConsistencyProblems());
				//
				Typestate t = tm.getTypestate();				
				if (t instanceof TypestateLabel) {
					t.setIsChecked();
					TypestateMethodList tml = (TypestateMethodList)((TypestateLabel) t).getTarget().getTypestate();
					problems = tml.doMethodTraversal(problems);
				} else if (t instanceof TypestateMethodList) {
					problems = ((TypestateMethodList) t).doMethodTraversal(problems);
				} else if (t instanceof TypestateSwitch) {
					TypestateSwitch tsw = (TypestateSwitch) t;
					tsw.setIsChecked();
					problems = tsw.doTypestateSwitchMethodTraversal(problems);
				} else { // EndTypestate
					t.setIsChecked();
					System.out.println("End Typestate");
				}
			}
		}
		return problems;
	}

	public LinkedList<Problem> TypestateSwitch.doTypestateSwitchMethodTraversal(LinkedList<Problem> problems) {
		for (int i = 0; i < getNumTypestateSwitchCase(); i++) {
			TypestateSwitchCase tc = getTypestateSwitchCase(i);
			Typestate t = tc.getTypestate();
			if (t instanceof TypestateLabel) {
				t.setIsChecked();
				TypestateMethodList tml = (TypestateMethodList)((TypestateLabel) t).getTarget().getTypestate();
				problems = tml.doMethodTraversal(problems);
			} else if (t instanceof TypestateMethodList) {
				problems = ((TypestateMethodList) t).doMethodTraversal(problems);
			} else if (t instanceof TypestateSwitch) {
				TypestateSwitch tsw = (TypestateSwitch) t;
				tsw.setIsChecked();
				problems = tsw.doTypestateSwitchMethodTraversal(problems);
			} else { // EndTypestate
				t.setIsChecked();
				System.out.println("End Typestate");				
			}
		}
		return problems;
	}
}