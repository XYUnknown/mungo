/**
 * Helper Methods for looking up methods, variables in AST
 */
aspect LookupMethod {
    /**
     * Get return type of a TypestateMethod
     */
    public Access TypestateMethod.getReturnType() {
    	return getTType().getAccess();
    }

    /**
     * Check whether a MethodDecl has the same return type as a TypestateMethod
     */
    public boolean MethodDecl.isSameReturnType(TypestateMethod tm) {
    	Access mdReturn = this.getTypeAccess();
    	Access tmReturn = tm.getReturnType();
    	if (mdReturn.getClass().equals(tmReturn.getClass())) {
			if(mdReturn.toString().equals(tmReturn.toString())){ // Better way to check than toString() ? 
				return true;
			}
    	}
    	return false;    	
    }

    /**
     * Check whether a MethodDecl has the same name as a TypestateMethod
     */
    public boolean MethodDecl.isSameName(TypestateMethod tm) {
    	return this.name().equals(tm.getID());    	
    }

    /**
     * Check whether a MethodDecl has the same parameter list as a TypestateMethod
     */
    public boolean MethodDecl.isSameParamList(TypestateMethod tm) {
    	if (this.getNumParameter() == tm.getTTypeList().getNumTType()) {
    		Access mdParam, tmParam;
    		for (int i = 0; i < this.getNumParameter(); i++){
    			mdParam = getParameter(i).getTypeAccess();
    			tmParam = tm.getTTypeList().getTType(i).getAccess();
    			if (!mdParam.getClass().equals(tmParam.getClass())){
    				return false;
    			}
    			if(!mdParam.toString().equals(tmParam.toString())){ //Better way to check than toString() ?
    				return false;
    			}    			
    		}
    		return true;
    	}
    	return false;    	
    }

    /**
     * Check whether a MethodDecl has the same signature as a TypestateMethod
     */
    public boolean MethodDecl.isSameSignature(TypestateMethod tm) {
    	return isSameReturnType(tm) &&isSameName(tm) && isSameParamList(tm);
    }

    /**
     * Check whether the arguments in a MethodAccess have valid state or not
     */
    public boolean MethodAccess.isValidParamState(TypestateMethod tm) {
        if (this.decl().isSameSignature(tm)) {
            Expr maArg, tmParam;
            if (this.getNumArg() == 0) { // Do not have arguments, nothing to check
                return true;
            }
            for (int i = 0; i < this.getNumArg(); i++){
                maArg = getArg(i);
                tmParam = tm.getTTypeList().getTType(i).getAccess();
                // A parameter has typestate specification
                if (tm.getTTypeList().getTType(i) instanceof TTypestate) {
                    TTypestate tt = (TTypestate) tm.getTTypeList().getTType(i);
                    Typestate ts = tt.getTypestate();
                    if (ts instanceof TypestateLabel) {
                        TypestateLabel tl = (TypestateLabel) ts;
                        if (maArg.hasTypestateState() && maArg.getState() != null) { // checking whether typestate are the same
                            if(!maArg.getState().containsKey(tl.getLabel())) { // state mismatch, return false
                                return false;
                            }
                        } else { // the argument of MethodAccess does not have state, this does not match the TTypestate
                            return false;
                        }
                    } else if (ts instanceof TypestateSwitch) {
                        // TODO args checking for TypestateSwitch
                        return true;
                    }                                      
                }             
            }
            return true; // nothing happens, return true
        }
        return false; // not same signature, return false
    }

    /**
     * Checking null state argument for all method Access
     * If a reference to a typestate object is `removed` 
     * Any method access using this reference will be regard as invalid
     */
    public boolean MethodAccess.hasParamWithNullState() {
        for (int i = 0; i < getNumArg(); i++) {
            if (getArg(i) instanceof VarAccess) {
                VarAccess arg = (VarAccess) getArg(i);
                if (arg.hasTypestateState() && arg.getState() == null) {
                   return true; 
                }
            }
        }
        return false;
    }

    public VarAccess MethodAccess.getParamWithNullState() {
        for (int i = 0; i < getNumArg(); i++) {
            if (getArg(i) instanceof VarAccess) {
                VarAccess arg = (VarAccess) getArg(i);
                if (arg.hasTypestateState() && arg.getState() == null) {
                   return arg; 
                }
            }
        }
        return null;
    }    

    /**
     * Lookup a TypestateMethod in TypestateMethodList for a MethodDecl
     */
    syn TypestateMethod TypestateMethodList.lookupMethod(MethodDecl md) {
        TypestateMethod result = null;        
        for (TypestateMethod tm: this.getTypestateMethodList()) {
            if (md.isSameSignature(tm)) {
                result = tm;
                return result;
            }            
        }
        return result;
    }

    /** 
     * Lookup a TypestateMethod in TypestateDecl for a MethodDecl
     */
    syn TypestateMethod TypestateDecl.lookupMethod(MethodDecl md) {
        TypestateMethod result = null;        
        for (TypestateMethod tm: this.getMethods()) {
            if (md.isSameSignature(tm)) {
                result = tm;
                return result;
            }            
        }
        return result;
    }

    /**
     * Checking whether a return statement has same state as the 
     * return state of the TypestateMethod with same signature 
     * of its host MethodDecl
     */
    syn boolean TypestateMethod.isSameReturnState(ReturnStmt rs) {
        if (getTType() instanceof TTypestate) {
            TTypestate tt = (TTypestate) getTType();
            Typestate ts = tt.getTypestate();
            if (rs.getResult() instanceof NullLiteral) {
                return true; // return null always valid
            }
            if (ts instanceof TypestateLabel) {
                TypestateLabel tl = (TypestateLabel) ts;
                if (rs.hasTypestateState() && rs.getState() != null) { // checking whether typestate are the same
                    if(!rs.getState().containsKey(tl.getLabel())) { // state mismatch, return false
                        return false;
                    }
                } else { // the return type does not have state, this does not match the TTypestate
                    return false;
                }
            } else if (ts instanceof TypestateSwitch) {
                // TODO args checking for TypestateSwitch
                return true;
            }
        } else {
            if (rs.hasState()) { // return type in TypestateMethod has no state specification but return statement has state
                return false;    
            }
        }
        return true; // nothing happens
    }

    /**
     * Lookup a state according to a string label
     */
    syn State TypestateDecl.lookupState(String label) {
        if (getInitState().getID().equals(label)) {
            return getInitState(); // separately parsed in old version
        } else {
            for (State s: getStateList()) {
                if (s.getID().equals(label)){
                    return s;
                }
            }
        }        
        return null;
    }

    syn State Declarator.getTypestateInitState() = type().getTypestateDecl().getInitState();

    
}