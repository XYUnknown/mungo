aspect IfElseAnalysis {
	coll LinkedList<Stmt> CompilationUnit.preprocess() root CompilationUnit;
	ConstructorDecl contributes {
		if (checkImplicitConstructorInvocation()) {
			getImplicitConstructorInvocation().collectContributions();
		}
		super.collectContributions();
	} to CompilationUnit.preprocess();

	IfStmt contributes each labelStmts() to CompilationUnit.preprocess();
	syn Collection<Stmt> IfStmt.labelStmts() {
		LinkedList<Stmt> list = new LinkedList<Stmt>();
		if (!this.isElseStmt()) {
			this.labelElse();
			this.labelLastStmt();
    	}             
        return list;
    }

	/**
	 * Methods and fields for analysing if-else statement
	 */
	private boolean Stmt.elseStmtStatus = false;

	public boolean Stmt.isElseStmt() {
		return this.elseStmtStatus;
	}

	public void Stmt.setIsElseStmt(boolean status) {
		this.elseStmtStatus = status;
	}

	private boolean Stmt.ifElseLastStmt = false;

	public boolean Stmt.isIfElseLastStmt() {
		return this.ifElseLastStmt;
	}

	public void Stmt.setIfElseLastStmt(boolean status) {
		this.ifElseLastStmt = status;
	}

	public void IfStmt.labelElse() {
		if (this.hasElse()) {
			Stmt elseStmt = this.getElse();
			elseStmt.setIsElseStmt(true);
			while (elseStmt instanceof IfStmt) {
				if (((IfStmt)elseStmt).hasElse()) {
					elseStmt = ((IfStmt)elseStmt).getElse();
					elseStmt.setIsElseStmt(true);
				}
			}
		}
	}

	public void IfStmt.labelLastStmt() {
		Stmt stmt = this;
		while (stmt instanceof IfStmt) {
			if (((IfStmt)stmt).hasElse()) {
				stmt = ((IfStmt)stmt).getElse();
			} else {
				break;
			}
		}
		if (stmt instanceof IfStmt) {
			Block blk = (Block)((IfStmt)stmt).getThen();
			if (!blk.hasStmts()) {
				blk.setIfElseLastStmt(true);
			} else {
				blk.getStmt(blk.getNumStmt() - 1).setIfElseLastStmt(true);
			}
		} else {
			Block blk = (Block) stmt;
			if (!blk.hasStmts()) {
				blk.setIfElseLastStmt(true);
			} else {
				blk.getStmt(blk.getNumStmt() - 1).setIfElseLastStmt(true);
			}
		}
	}
}