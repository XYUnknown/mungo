aspect TypestateAnalysis {
    /**
     * Adding a field state to ASTNode
     */
    private State ASTNode.typestate = null;

    /**
     * Checking whether a ASTNode has typestate or not
     * TypeDecl and its child nodes might have TypstateDecl
     */
    syn boolean ASTNode.hasTypestateDecl() {
        return false;
    }

    /** 
     * Attribute hasTypestateState(), ASTNode does not have state,
     * but some subtypes of ASTNode have state
     */
    syn boolean ASTNode.hasTypestateState() {
        return false;
    }

    public void ASTNode.setState(State typestate) {
        if (hasTypestateState()) {
            this.typestate = typestate;
        }        
    }

    public State ASTNode.getState() {
        return this.typestate;
    }

    public boolean ASTNode.hasState() {
        return false;
    }

    /**
     * Expr: ASTNode
     * Expr may have a TypestateDecl, some subtypes of Expr have state
     */
    syn boolean Expr.hasTypestateDecl() {
        return this.type().hasTypestateDecl();
    }


	/**
     * Declarator: ASTNode
     * Valid for both FieldDeclarator and VariableDeclarator
     * FieldDeclarator: Declarator
     * VariableDeclarator: Declarator
     */

    /**
     * Checking whether a Declarator has typestate or not
     */
    syn boolean Declarator.hasTypestateDecl(){
        return this.type().hasTypestateDecl();
    }

    /** 
     * Attribute hasTypestateState(), a Declarator should have a state
     * if it has a TypestateDecl.
     */
    eq Declarator.hasTypestateState() = hasTypestateDecl();

    @Override
    public boolean Declarator.hasState() {
        return getState() != null;
    }

    /**
     * ParameterDeclaration: ASTNode
     * Direct subtype - VariableArityParameterDeclaration
     */
    syn boolean ParameterDeclaration.hasTypestateDecl(){
        return this.type().hasTypestateDecl();
    }

    eq ParameterDeclaration.hasTypestateState() = hasTypestateDecl();

    @Override
    public boolean ParameterDeclaration.hasState() {
        return getState() != null;
    }

    /**
     * InferredParameterDeclaration: ASTNode
     */
    syn boolean InferredParameterDeclaration.hasTypestateDecl(){
        return this.type().hasTypestateDecl();
    }

    /**
     * EnumConstant: ASTNode
     */
    syn boolean EnumConstant.hasTypestateDecl() {
        return this.type().hasTypestateDecl();
    }

    /**
     * CatchParameterDeclaration: ASTNode
     * Currently does not have state 
     */
    syn boolean CatchParameterDeclaration.hasTypestateDecl() {
        return this.type().hasTypestateDecl();
    }

    /**
     * VarAccess, getting the state of the corresponding subtypes implementing Variable
     */

    /**
     * Checking whether a VarAccess has typestate or not
     */
    syn boolean VarAccess.hasTypestateDecl() {
        return this.type().hasTypestateDecl();
    }

    syn boolean VarAccess.hasTypestateState() {
        //Declarator vd = (Declarator) varDecl(); 
        ASTNode node = (ASTNode) varDecl();
        return node.hasTypestateState();
    }

    public State VarAccess.getState() {
        ASTNode node = (ASTNode) varDecl();
        return node.getState();
    }

    public boolean VarAccess.hasState() {
        return getState() != null;
    }

    /**
     * ClassInstanceExpr: Access 
     */
    syn boolean ClassInstanceExpr.hasTypestateDecl() {
        return this.type().hasTypestateDecl();
    }

    /** 
     * A ClassInstanceExpr should have a state if it has a TypestateDecl,
     * state will always be init state
     */
    eq ClassInstanceExpr.hasTypestateState() = hasTypestateDecl();

    @Override
    public boolean ClassInstanceExpr.hasState() {
        return getState() != null;
    }

    @Override
    public State ClassInstanceExpr.getState() {
        if (hasTypestateState()) {
            super.setState(type().getTypestateDecl().getInitState());
        }
        return super.getState();
    }



    /**
     * Checking whether a compilation unit is constructed from a typestate protocol
     */
    public boolean CompilationUnit.isTypestateCompilationUnit(){
        for (TypeDecl td: this.getTypeDecls()){
            if (td instanceof TypestateDecl){
                return true;
            }
        }
        return false;
    }

    /**
     * Getting the TypestateDecl from a CompilationUnit
     * There should be only one TypestateDecl in one typestate complation unit 
     */
    public TypestateDecl CompilationUnit.getTypestateDecl(){
    	if(isTypestateCompilationUnit()){
    		for (TypeDecl td: this.getTypeDecls()){
            	if (td instanceof TypestateDecl){
                	return (TypestateDecl) td;
            	}
        	}
    	}
		return null;
    }

    /**
     * Getting the TypestateAnnotation of a TypeDecl
     * We need the TypestateAnnotation ID to check which 
     * typestate protocol CompilationUnit is the corresponding one.
     */
    public TypestateAnnotation TypeDecl.getTypestateAnnotation(){
        for (Modifier m: getModifiers().getModifierList()){
            if (m instanceof TypestateAnnotation){
                TypestateAnnotation ta = (TypestateAnnotation) m;
                return ta;
            }
        }
        return null;
    }


    /**
     * Checking whether a TypeDecl has typestate annotation
     */
    public boolean TypeDecl.hasTypestateAnnotation() {
        return getTypestateAnnotation() == null? false : true;
    }

    /**
     * Getting the TypestateDecl of a TypeDecl from compilation units
     */
    syn lazy TypestateDecl TypeDecl.getTypestateDecl() {
    	TypestateAnnotation ta = getTypestateAnnotation();
        if (ta != null){
            ASTNode node = this.getParent();
            while (! (node instanceof Program)){
                node = node.getParent();
            }   
            Program program = (Program) node;
            for (CompilationUnit cu: program.getCompilationUnitList()){
                if(cu.isTypestateCompilationUnit()){
                    if(cu.getTypestateDecl().getID().equals(ta.getID())){
                        return cu.getTypestateDecl();
                    }
                }
            }
        }       
        return null;
    }

    /**
     * A TypeDecl could have at most one typestate annotation
     */
    public boolean TypeDecl.validNumTypestateAnnotation() {
        LinkedList<TypestateAnnotation> list = new LinkedList<TypestateAnnotation>();
        for (Modifier m: getModifiers().getModifierList()){
            if (m instanceof TypestateAnnotation){
                list.add((TypestateAnnotation) m);
            }
        }    
        return ((list.size() == 0) || (list.size() == 1));
    }

    /**
     * Checking whether a TypeDecl has typestate or not
     */
    syn lazy boolean TypeDecl.hasTypestateDecl() {
        return getTypestateDecl() == null? false : true;
    }

    /**
     * Checking whether a VarDeclStmt has typestate or not
     */
    syn lazy boolean VarDeclStmt.hasTypestateDecl(){
        return this.type().hasTypestateDecl();
    }

    /**
     * Checking whether a VariableDeclarator has typestate or not
     */
    syn lazy boolean VariableDeclarator.hasTypestateDecl(){
        return this.type().hasTypestateDecl();
    }

    
}