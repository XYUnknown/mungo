/**
 * Helper methods for typestate checking
 */
aspect TypestateCheckFunctionality {
	/**
	 * Method Access Typestate analysing, state updating, problems reporting.
	 */
	private LinkedList<Problem> MethodAccess.collectProblems(State currState, MethodDecl md, Expr va) {
		LinkedList<Problem> problems = new LinkedList<Problem>();		
		TypestateMethodList methodList = (TypestateMethodList) currState.getTypestate();
		// lookup the TypestateMethod which has same signature as the MethodDecl
		TypestateMethod tsMethod = methodList.lookupMethod(md); 
		if (tsMethod != null) { // The TypestateMethod is found
			if(!isValidParamState(tsMethod)) {
				problems.add(error("MethodAccess " + this + " has arguments in invalid state."));
				return problems;
			}
			if (tsMethod.getTypestate() instanceof TypestateSwitch){
				/**
				 * Update state - Store label and State in the state map
				 * lable is different from the State name
				 * For example TRUE: Empty
				 */
				TypestateSwitch tsw = (TypestateSwitch) tsMethod.getTypestate();
				va.setState(tsw);
			} else {
				va.setState(tsMethod.getTypestate());
			}
		} else { // The TypestateMethod is not found 
			problems.add(error("Invalid MethodAccess " + this + " in State: " + currState.getID()));
			return problems;
		}
		return problems;
	}

	/**
	 * Method Access Typestate analysing, state updating, problems reporting.
	 */
	private LinkedList<Problem> MethodAccess.collectProblems(TypestateMethodList methodList, MethodDecl md, Expr va) {
		LinkedList<Problem> problems = new LinkedList<Problem>();
		TypestateMethod tsMethod = methodList.lookupMethod(md);
		if (tsMethod != null) { // The TypestateMethod is found
			if(!isValidParamState(tsMethod)) {
				problems.add(error("MethodAccess " + this + " has arguments in invalid state."));
				return problems;
			}
			if (tsMethod.getTypestate() instanceof TypestateSwitch){
				/**
				 * Update state - Store label and State in the state map
				 * lable is different from the State name
				 * For example TRUE: Empty
				 */
				TypestateSwitch tsw = (TypestateSwitch) tsMethod.getTypestate();
				va.setState(tsw);
			} else {
				va.setState(tsMethod.getTypestate());
			}
		} else { // The TypestateMethod is not found 
			problems.add(error("Invalid MethodAccess " + this + " for current state"));
			return problems;
		}
		return problems;
	}

	/**
	 * Look up parent stmt of a MethodAccess
	 */
	syn Stmt MethodAccess.lookupStmt() {
		ASTNode node = this.getParent();
        while (node != null) {
            if (node instanceof Stmt) {
                return (Stmt)node;
            } else {
                node = node.getParent();
            }
        }
        return null;
	}

}