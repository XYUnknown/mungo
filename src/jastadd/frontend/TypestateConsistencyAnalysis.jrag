/**
 * Fields and methods for checking typestate consistency.
 * This part is separate from the main typestate check, althought those two parts together 
 * handle typestate consistency checking.
 *
 * The main concern of typestate consistency is following situation:
 * When a MethodDecl has typestate specification in, for example, A.protocol.
 * Within this MethodDecl, FieldDeclarator b, which has host class B with B.protocol defining its typestates.
 * We need to check within A class MethodDecls, whether typestate transistion of B FieldDeclarator is violated or not.
 * 
 * This checking can be separated into two parts:
 * 0. When entering next state (A protocol), a FieldDeclarator is in the suitable state for next method access(B protocol)
 * 1. If some MethodDecls have same target state (A protocol), a FieldDeclarator should also end up at same state(B protocol)
 *
 * 0 is handled by regular typestate checking
 * 1 is handle by method in this file and TypestateConsistencyCheck.jrag
 */
aspect TypestateConsistencyAnalysis {
	private HashMap<Variable, Typestate> Typestate.fieldDeclaratorMap;

	public HashMap<Variable, Typestate> Typestate.getFieldDeclaratorMap() {
		return this.fieldDeclaratorMap;
	}

	public void Typestate.setFieldDeclaratorMap(HashMap<Variable, Typestate> map) {
		this.fieldDeclaratorMap = map;
	}

	public void Typestate.addToFieldDeclaratorMap(Variable v, Typestate t) {
		if (this.fieldDeclaratorMap == null) {
			this.fieldDeclaratorMap = new HashMap<Variable, Typestate>();
		}
		this.fieldDeclaratorMap.put(v, t);
	}

	public boolean Typestate.hasFieldDeclaratorMap() {
		return (this.fieldDeclaratorMap != null);
	}

	private LinkedList<Typestate> TypestateDecl.typestateList;

	public LinkedList<Typestate> TypestateDecl.getTypestateList() {
		return this.typestateList;
	}

	public void TypestateDecl.setTypestateList(LinkedList<Typestate> list) {
		this.typestateList = list;
	}

	public void TypestateDecl.addToTypestateList(Typestate t) {
		if (this.typestateList == null) {
			this.typestateList= new LinkedList<Typestate>();
		}
		this.typestateList.add(t);
	}

	public boolean TypestateDecl.hasTypestateList() {
		return (this.typestateList != null);
	}


	private Typestate FieldDeclarator.recordState;

	public Typestate FieldDeclarator.getRecordState() {
		return this.recordState;
	}

	public void FieldDeclarator.setRecordState(Typestate t) {
		this.recordState = t;
	}
}