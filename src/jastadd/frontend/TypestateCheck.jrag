aspect TypestateCheck {

    public boolean CompilationUnit.isTypestateCompilationUnit(){
        for (TypeDecl td: this.getTypeDecls()){
            if (td instanceof TypestateDecl){
                return true;
            }
        }
        return false;
    }

    private String CompilationUnit.protocolName = "";

    public String CompilationUnit.getProtocolName() {
        return this.protocolName;
    }
    public void CompilationUnit.setProtocolName(String name) {
        this.protocolName = name;
    }

    /**
     * Typestate protocol file is parsed into an CompilationUnit
     * An arribute pointer of ClassDecl is pointing to this CompilationUnit
     */
    syn CompilationUnit ClassDecl.getTypestateCompilationUnit(){
        TypestateAnnotation ta = getTypestateAnnotation();
        if (ta != null){
            ASTNode node = this.getParent();
            while (! (node instanceof Program)){
                node = node.getParent();
            }   
            Program program = (Program) node;
            for (CompilationUnit cu: program.getCompilationUnitList()){
                if(cu.isTypestateCompilationUnit()){
                    if(cu.getProtocolName().equals(ta.getID())){
                        return cu;
                    }
                }
            }
        }       
        return null;
    }

    /**
     * Getting the TypestateAnnotation of a ClassDecl
     * We need the TypestateAnnotation ID to check which 
     * typestate protocol CompilationUnit is the corresponding one.
     */
    public TypestateAnnotation ClassDecl.getTypestateAnnotation(){
        for (Modifier m: getModifiers().getModifierList()){
            if (m instanceof TypestateAnnotation){
                TypestateAnnotation ta = (TypestateAnnotation) m;
                return ta;
            }
        }
        return null;
    }


    ClassDecl contributes each typestateProblems() to CompilationUnit.problems();
    syn Collection<Problem> ClassDecl.typestateProblems() {
        CompilationUnit cu = this.getTypestateCompilationUnit();
        if(cu != null){
            System.out.println("Found CU in ClassDecl" + cu.getProtocolName());
        }        
        return new LinkedList<Problem>();
    }

	Modifiers contributes each typestateProblems() to CompilationUnit.problems();
	syn Collection<Problem> Modifiers.typestateProblems(){
		for(Modifier m: getModifierList()){

			// Here we would like to test how to access the protocol file according to the typestate annotation
			if(m instanceof TypestateAnnotation){
				//System.out.println("found typestate annotation in Modifiers");
				//System.out.println("Get protocol name from ID: " + m.getID());
				String fileName = "testfiles/collection/" + m.getID() + ".protocol";
				String line = null;
				try {
            		FileReader fileReader = new FileReader(fileName);
            		BufferedReader bufferedReader = new BufferedReader(fileReader);
            		while((line = bufferedReader.readLine()) != null) {
                		//System.out.println(line);
            		}   
            		bufferedReader.close();         
        		} catch(FileNotFoundException ex) {
            		System.out.println("Unable to open file '" + fileName + "'");                
        		} catch(IOException ex) { 
        			System.out.println("Error reading file '" + fileName + "'");                  
        		}
			}
		}
		return new LinkedList<Problem>();
	}

	MethodAccess contributes each typestateProblems() to CompilationUnit.problems();
  	syn Collection<Problem> MethodAccess.typestateProblems(){
  		
  		// Here what we are trying to do is to check whether the typestate annotation can be found during method access.
  		// System.out.println("MethodAccess: " + (this.hostType() instanceof ClassDecl));
  		ClassDecl cd = (ClassDecl) this.hostType();
        if(cd.getTypestateCompilationUnit() != null){
            System.out.println("Found CU in MethodAccess" + cd.getTypestateCompilationUnit().getProtocolName());
        }
  		return new LinkedList<Problem>();
	}

}