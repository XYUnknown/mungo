aspect TypestateCheck {

    TypeDecl contributes each typestateProblems() to CompilationUnit.problems();
    syn Collection<Problem> TypeDecl.typestateProblems() {
        LinkedList<Problem> problems = new LinkedList<Problem>();
        TypestateDecl td = this.getTypestateDecl();
        if (!validNumTypestateAnnotation()){
            problems.add(error("A TypeDecl could have at most one typestate annotation."));
        }
        if (hasTypestateAnnotation() && (td == null)){
            problems.add(error("There is no CompilationUnit contructed from typestate protocol: " + getTypestateAnnotation().getID()));
        }
        if(td != null){
            System.out.println("Found TypestateDecl in TypeDecl: " + td.getID());
        }        
        return problems;
    }

    ClassDecl contributes each typestateProblems() to CompilationUnit.problems();
    syn Collection<Problem> ClassDecl.typestateProblems() {
        LinkedList<Problem> problems = new LinkedList<Problem>();
        TypestateDecl td = this.getTypestateDecl();
        if (!validNumTypestateAnnotation()){
            problems.add(error("A ClassDecl could have at most one typestate annotation."));
        }
        if (hasTypestateAnnotation() && (td == null)){
            problems.add(error("There is no CompilationUnit contructed from typestate protocol: " + getTypestateAnnotation().getID()));
        }
        if(td != null){
            System.out.println("Found TypestateDecl in ClassDecl: " + td.getID());
        }        
        return problems;
    }

	MethodAccess contributes each typestateProblems() to CompilationUnit.problems();
  	syn Collection<Problem> MethodAccess.typestateProblems() {
  		LinkedList<Problem> problems = new LinkedList<Problem>();
        System.out.println("---------checking------------");
        System.out.println("MethodAccess name: " + name());
        System.out.println("MethodAccess instance: " + getVarAccess());
        VarAccess va = getVarAccess();
        if(va != null){
            if(va.hasTypestateDecl()){                
                VariableDeclarator vd = (VariableDeclarator)va.varDecl();                
                MethodDecl md = this.decl();
                boolean result = false;
                TypestateLabel tl = null;
                TypestateMethodList typestate = (TypestateMethodList) vd.getState().getTypestate();
                for (TypestateMethod tm: typestate.getTypestateMethodList()) {
                    result = md.isSameSignature(tm);
                    System.out.println("Same signature? " + result);                    
                    if (result) {
                        if (tm.getTypestate() instanceof TypestateLabel) {
                            tl = (TypestateLabel) tm.getTypestate();
                            vd.setState(tl.getTarget()); // Update State of VariableDeclarator
                        } else if (tm.getTypestate() instanceof TypestateSwitch){
                        // TODO: type state check of TypestateSwitch
                        }
                        break;
                    }
                }
                if(!result) {
                    problems.add(error("Invalid MethodAccess " + this + " in State: " + vd.getState().getID()));
                }
            }
        }        
  		return problems;
	}


    VariableDeclarator contributes each typestateProblems() to CompilationUnit.problems();
    syn Collection<Problem> VariableDeclarator.typestateProblems() {
        LinkedList<Problem> problems = new LinkedList<Problem>();
        System.out.println("Printing VD: " + this); 
        System.out.println("Init: " + getInit().getClass());  
        if (hasTypestateDecl()) {
            if (!hasState()) {
                if (getInit() instanceof ClassInstanceExpr) {
                    setState(getTypestateInitState());
                } else {

                }
            }
            //if (!hasState()) {
                //problems.add(error("No Init State"));
            //}
        }
        return problems;
    }

    ClassInstanceExpr contributes each typestateProblems() to CompilationUnit.problems();
    syn Collection<Problem> ClassInstanceExpr.typestateProblems() {
        LinkedList<Problem> problems = new LinkedList<Problem>();
        return problems;
    }

    VarDeclStmt contributes each typestateProblems() to CompilationUnit.problems();
    syn Collection<Problem> VarDeclStmt.typestateProblems() {
        LinkedList<Problem> problems = new LinkedList<Problem>();
        //System.out.println("VarDeclStmt: " + this + " " +this.lineNumber());
        //System.out.println("VarDeclStmt Declarators: ");
        for (VariableDeclarator vd: getDeclarators()){
            System.out.println(vd);
        }
        return problems;
    }

    VarAccess contributes each typestateProblems() to CompilationUnit.problems();
    syn Collection<Problem> VarAccess.typestateProblems() {
        LinkedList<Problem> problems = new LinkedList<Problem>();
        System.out.println("Printing VA: " + this);  
        return problems;
    }


}