aspect SymbolTable {
	class SymbolTable {
		private HashMap <Variable, HashMap<String, State>> globals;
		private Stack <HashMap<Variable, HashMap<String, State>>> locals;

		public SymbolTable () {
			this.globals = new HashMap <Variable, HashMap<String, State>> ();
			this.locals = new Stack <HashMap<Variable, HashMap<String, State>>> ();
		}

		public HashMap <Variable, HashMap<String, State>> getGlobals() {
			return this.globals;
		}

		public Stack <HashMap<Variable, HashMap<String, State>>> getLocals() {
			return this.locals;
		}

		public void addGlobal(Variable var, HashMap<String, State> state) {
			this.globals.put(var, state);
		}

		public HashMap<Variable, HashMap<String, State>> exitLocal() {
			return this.locals.pop();
		}

		public HashMap<Variable, HashMap<String, State>> currentLocal() {
			return this.locals.peek();
		}

		public void addLocal(HashMap<Variable, HashMap<String, State>> table) {
			this.locals.push(table);
		}

		public void addCurrLocal(Variable var, HashMap<String, State> state) {
			HashMap<Variable, HashMap<String, State>> table = this.locals.peek();
			table.put(var, state);
		}

		public void clearLocals() {
			this.locals.clear();
		}
	}

	private SymbolTable ClassDecl.symbolTable = new SymbolTable();

	public SymbolTable ClassDecl.getSymbolTable() {
		return this.symbolTable;
	}

	private void ClassDecl.addAllGlobals(LinkedList<HashMap<Variable, HashMap<String, State>>> list) {
		for (HashMap<Variable, HashMap<String, State>> map: list) {
			this.symbolTable.getGlobals().putAll(map);
		}
	}

	coll LinkedList<HashMap<Variable, HashMap<String, State>>> ClassDecl.collectGlobals() root ClassDecl;
	// Add problem contributions from the implicit constructor invocation NTA.
	ConstructorDecl contributes {
		if (checkImplicitConstructorInvocation()) {
			getImplicitConstructorInvocation().collectContributions();
		}
		super.collectContributions();
	} to ClassDecl.collectGlobals();

	FieldDecl contributes each fieldDeclaratorStateMap() to ClassDecl.collectGlobals();
	syn LinkedList<HashMap<Variable, HashMap<String, State>>> FieldDecl.fieldDeclaratorStateMap() {
		LinkedList<HashMap<Variable, HashMap<String, State>>> list = new LinkedList<HashMap<Variable, HashMap<String, State>>>();
		for (FieldDeclarator fd: getDeclaratorList()) {
			if (fd.hasTypestateState()) {
				HashMap<Variable, HashMap<String, State>> map = new HashMap<Variable, HashMap<String, State>>();
				map.put(fd, fd.getState());
				list.add(map);
			}
		}
		return list;
	}
}