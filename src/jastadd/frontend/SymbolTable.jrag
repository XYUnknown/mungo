/**
 * A SymbolTable stores Variables and their states within a ClassDecl.
 * FieldDeclarstors are initially stored in globals.
 * Variables declared in body blocks are stored in locals.
 * When entering a block, a new hash map is pushed onto the stack.
 * When exiting a block, the hash map on the top of the local stack will be popped.
 */
aspect SymbolTable {
	class SymbolTable {
		private HashMap <Variable, Typestate> globals;
		private Stack <HashMap<Variable, Typestate>> locals;

		public SymbolTable () {
			this.globals = new HashMap <Variable, Typestate> ();
			this.locals = new Stack <HashMap<Variable, Typestate>> ();
		}

		public HashMap <Variable, Typestate> getGlobals() {
			return this.globals;
		}

		public Stack <HashMap<Variable, Typestate>> getLocals() {
			return this.locals;
		}

		public void addGlobal(Variable var, Typestate state) {
			this.globals.put(var, state);
		}

		public HashMap<Variable, Typestate> exitLocal() {
			return this.locals.pop();
		}

		public HashMap<Variable, Typestate> currentLocal() {
			return this.locals.peek();
		}

		public void addLocal(HashMap<Variable, Typestate> table) {
			this.locals.push(table);
		}

		public void addCurrLocal(Variable var, Typestate state) {
			HashMap<Variable, Typestate> table = this.locals.peek();
			table.put(var, state);
		}

		public void clearLocals() {
			this.locals.clear();
		}

		/**
		 * Lookup a variable's state in the SymbolTable.
		 * From top to bottom of local stack, if not found in 
		 * stack, loop it up in globles.
		 */
		public Typestate lookupVariableState(Variable v) {
			Typestate state = null;
			Stack <HashMap<Variable, Typestate>> temp = new Stack <HashMap<Variable, Typestate>>();
			// lookup in locals first - from recent to old
			HashMap<Variable, Typestate> current;
			while (!this.getLocals().empty()) {
				current = this.currentLocal();
				if (!current.containsKey(v)) {
					temp.push(this.exitLocal());
					if(this.getLocals().empty()) {
						break;
					} else {
						current = this.currentLocal();
					}
				} else {
					state = current.get(v);
					break;
				}
			}
			// not found in local, look up in globals
			if (state == null) {
				state = (this.getGlobals().containsKey(v) ? this.getGlobals().get(v) : null);
			}
			// put back locals
			while (!temp.empty()) {
				this.addLocal(temp.pop());
			}
			return state;
		}
	}

	/**
	 * SymbolTable is stored in ClassDecl
	 */
	private SymbolTable ClassDecl.symbolTable = new SymbolTable();

	public SymbolTable ClassDecl.getSymbolTable() {
		return this.symbolTable;
	}

	private void ClassDecl.addAllGlobals(LinkedList<HashMap<Variable, Typestate>> list) {
		for (HashMap<Variable, Typestate> map: list) {
			this.symbolTable.getGlobals().putAll(map);
		}
	}

	/** 
	 * Add local SymbolTable for MethodDecl
	 */ 
	public void MethodDecl.initialiseLocalSymbolTable() {
		SymbolTable st = ((ClassDecl)this.hostType()).getSymbolTable();
		// if SymbolTable local stack is empty, push new table with ParameterDeclarator information on it
		// if not empty, clear it and push the new table on it
		if (!st.getLocals().empty()) {
			st.clearLocals();
		}
		HashMap<Variable, Typestate> map = new HashMap<Variable, Typestate>();
		st.addLocal(map);
	}

	/**
	 * Initialise globals by collection FieldDeclarators' states from FieldDecl of the ClassDecl
	 */
	coll LinkedList<HashMap<Variable, Typestate>> ClassDecl.collectGlobals() root ClassDecl;
	// Add problem contributions from the implicit constructor invocation NTA.
	ConstructorDecl contributes {
		if (checkImplicitConstructorInvocation()) {
			getImplicitConstructorInvocation().collectContributions();
		}
		super.collectContributions();
	} to ClassDecl.collectGlobals();

	FieldDecl contributes each fieldDeclaratorStateMap() to ClassDecl.collectGlobals();
	syn LinkedList<HashMap<Variable, Typestate>> FieldDecl.fieldDeclaratorStateMap() {
		LinkedList<HashMap<Variable, Typestate>> list = new LinkedList<HashMap<Variable, Typestate>>();
		for (FieldDeclarator fd: getDeclaratorList()) {
			if (fd.hasTypestateState()) {
				HashMap<Variable, Typestate> map = new HashMap<Variable, Typestate>();
				map.put(fd, fd.getState());
				list.add(map);
			}
		}
		return list;
	}
}